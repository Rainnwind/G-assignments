\documentclass[a4paper,12pt,danish]{report}
\usepackage[utf8]{inputenc}
\usepackage[danish]{babel}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{listings}
\usepackage{hyperref}
\usepackage{booktabs}
\usepackage{graphicx}
\usepackage{makeidx}
\usepackage{titlesec}
\usepackage{fancyhdr}
\usepackage{wrapfig}
\usepackage{fancyvrb}
\usepackage{pbox}
\usepackage{hyperref}
\usepackage{mathtools}
\usepackage{amsmath}
\usepackage{multicol}
\pagestyle{fancy}
%Setting link borders to none
\hypersetup{pdfborder = {0 0 0}}

\fancyhead[C]{}
\fancyhead[L]{}
\fancyhead[R]{\footnotesize{
Rane Eriksen \textsc{BVL193}\\
Christian Efternavn \textsc{??????}\\
Sebastian O. Jensen \textsc{GJX653}}}

\begin{document}
\begin{titlepage}

\newcommand{\HRule}{\rule{\linewidth}{0.4mm}}
\center
\small{ \emph{Forfattere:}\\
13.07-89 Rane Eriksen \textsc{BVL193}
\\
dd.mm-yy Christian Efternavn \textsc{nummerplade}
\\
14.06-79 Sebastian O. Jensen \textsc{GJX653}
\\
Hold 1} \\[2cm]

\textsc{\LARGE Datalogisk Institut}\\[0.5cm]
\textsc{\large Københavns Universitet}\\[1.5cm]
\textsc{\large Lineær algebra for dataloger}\\
\HRule \\[0.7cm]
{\huge \bfseries G-Assignment 1}\\[0.4cm]
\HRule \\[1.5cm]
\textsc{\Large \textsc{\today}}\\[0.5cm]

\includegraphics[scale=0.5]{ku_logo.png}\\[1cm]

\end{titlepage}
\tableofcontents
\newpage
\renewcommand{\thesection}{\arabic{section}}
\renewcommand{\thempfootnote}{\arabic{mpfootnote}}
\renewcommand\thesubsection{}
\newcommand{\minus}[1]{{#1}^{-}}
\section{Task 1. A priority queue}
\subsection{notes}
The heap data structure is a tree structure that is only concerned about the highest or lowest value which is always stored in the first entry of the tree.
\\
\\
Inserting a node is done by appending the node to the tail of the array which symbolizes the heap.
\\
The newly inserted node is then compared with its parrent node - If the heap is a max heap the priority of the parrent node must be lower than the priority of the newly inserted node - which it is in our case - if it is higher, the two nodes swap places in the array, this process is done until the newly inserted node has reached the root of the tree or if the newly inserted node is lower or equal to its parrent.
\\
\\
The runtime is $\Theta(log\ n)$ since the newly inserted node must only compare itself with a parrent "height of the tree"\ times.
\\
\\
Removing the root node is very similar to inserting a node since removing the node is done by storing the root node in a temporary variable and moving the tail node to the root node.
\\
The root node is then compared to its children and swapped with one of the children if either the priority of the left child node is bigger than the  priority of the root node or the priority of the right child node is bigger than the priority of the root node.
\\
This process is also repeated untill neither of the children has a node with a priority that is higher than their parrent.
\\
Once this process is completed the the temporary variable is returned by the function.
\\
The runtime of removing a node is also $\Theta(log\ n)$
\\
\\
This makes it a good structure for a priority queue, and can be used to improve the current priority queue with a running time of $\Theta(n^2)$
\subsection{Implementation}
\subsubsection{void heap\_initialize(heap *h)}
initializes a new heap by allocating size for the root of the array and sets the size of the heap to zero which is used to indicate how many entries the root contains.

\subsubsection{void heap\_clear(heap *h)}
frees the allocated memory used by the heap and sets the "initialized" variable in the heap to zero - This is used to determine if a heap is correctly initialized in every other function other than insert.

\subsubsection{size\_t heap\_size(heap *h)}
returns the size of the heap which is the count of inserted nodes in the root.

\subsubsection{void *heap\_top(heap *h)}
Returns the root node of the heap which is also the node with the highest priority.

\subsubsection{void heap\_insert(heap *h, void *item, int priority)}
Appends the node to the heap, the newly inserted node is then compared to its parrents and sorted if needed.

\subsubsection{void *heap\_pop(heap *h)}
returns the root node which is also the ndoe with the highest priority.
\\
Before the node is returned the root of the heap is replaced with the tail of the heap and the heap is sorted in order to maintain the properties of the heap.
\subsection{Unit testing}
In our unit tests we are testing every function seperately.
\\
Every test performed is done by expecting a value of comparing the expected value with the actual value.
\\
The actual value is retrieved in two ways.
\\
If the function returns anything else than void, then that's the value we are comparing with.
\\
If the function returns void we are simply extracting the value from the heap since we have direct access to the heap.
\\
\\
The heap root has an object "void *thing"\ which can be anything and is a pointer to some object.
\\
We chose, because of this fact, to only test against the expected priority instead of testing for an expected "thing".
\\
\subsubsection{What do we test and where?}
The tests are initialized from main.c which calls:
\\
\begin{itemize}
  \item{unit\_test\_heap\_initialize}
    \\
    Tests the allocated size of root in the heap
  \item{unit\_test\_heap\_clear}
    \\
    Tests the alloceted size of the root in the heap
  \item{unit\_test\_heap\_size}
    \\
    Tests the size of the heap root - Actually inserted nodes
  \item{unit\_test\_heap\_top}
    \\
    Tests the priority of the heap roots top priority
  \item{unit\_test\_heap\_insert}
    \\
    Tests if the heap root expands when the array is full by checking the allocated size of the heap root - It also tests the top priority of the heap root.
  \item{unit\_test\_heap\_pop}
    \\
    Tests the top priority of the returned node by the function.
\end{itemize}
\newpage
\section{Task 2. Buenos system calls for basic I/O}
\subsection{notes}

\subsection{Implementation}
\subsubsection{Which files did we modify/add?}
\begin{itemize}
    \item{We modified: kernel/module.mk}
        \\
        In this file, we have added read.c and write.c to FILES in order to have our implementation compiled along
        with the rest of buenos kernel.
    \item{We added: kernel/read.h}
        \\
        Contains the header file for the solution to syscall\_read
    \item{We added: kernel/read.c}
        \\
        Contains the actual code for the solution to syscall\_read
    \item{We added: kernel/write.h}
        \\
        Contains the header file for the solution to syscall\_write
    \item{We added: kernel/write.c}
        \\
        Contains the actual code for the solution to syscall\_write
    \item{we modified: proc/syscall.c}
        \\
        We expanded the switch to also handle syscall\_read and syscall\_write and we defined the 
        variables A0, A1, A2, A3 and V0
\end{itemize}
\subsubsection{kernel/module.mk}
As stated before, we only added read.c and write.c to this file in order to have our solution compiled with the buenos kernel in order to use the solution.

\subsubsection{kernel/read.h}
In this file we we implemented the function \textit{int syscall\_read(uint32\_t, uint32\_t, uint32\_t);}
This function is explained in the next section.
\subsubsection{kernel/read.c}
\textit{int syscall\_read(uint32\_t f\_handle, uint32\_t buffer\_addr, uint32\_t length)} takes three arguments:
\begin{enumerate}
    \item{uint32\_t f\_handle}
        \\
        f\_handle is a file handle which indicates which file to read from.
        \\
        In our implementation we do only care for the console which in the function is defined as "FILEHANDLE\_STDIN", defined in proc/syscall.h\\
        Our implementation therefore distincts between 0 (FILEHANDLE\_STDIN) and everything else.\\
        if the first argument is 0 the function will enter our implementation for reading from the console if it anything else than 0 our implementation will return -1 because we did not implement a solution for reading from files. -1 simply indicates an error to the function that called syscall\_read
    \item{uint32\_t buffer\_addr}
        \\
        buffer\_addr is the address to the buffer which will contain the read bytes from the console one the function has completed.
    \item{uint32\_t length}
        \\
        length is the max size of bytes which may be read from the console - In our implementation we reserve one byte in the buffer\_addr in order to append a null terminating string to the bytes read from the console.
\end{enumerate}
In our implementation we are reading one byte at a time which allows our implementation to look for the return key. If the return key is pressed the function will stop reading from the console and the length of read bytes is returned. Everything read from the console is stored in buffer\_addr which the caller function provided when calling syscall\_read.\\
The caller function then has access to what was read from the console because it provided the address to the buffer to syscall\_read.
\\
The actual length of read bytes is available to the caller function in a somewhat different manner.
\\
Once syscall\_read returns the length of bytes read it is returned to proc/syscall.c however this functions returns void which means that we cannot return the value to the actual caller function, instead we are setting the variable V0 to the returned value - V0 is then returned to the caller function.
\subsubsection{kernel/write.h}
In this file we we implemented the function \textit{int syscall\_write(uint32\_t, uint32\_t, uint32\_t);}
This function is explained in the next section.
\subsubsection{kernel/write.c}
\textit{int syscall\_write(uint32\_t f\_handle, uint32\_t buffer\_addr, uint32\_t length)} is very similar to \textit{syscall\_read} in the sence that it takes the exact same arguments and they have the same meaning - The function is called in the same way and the return values are also the same.
\\
The difference between the two functions is, that \textit{syscall\_write} writes to the console whereas \textit{syscall\_read} reads from the console.
\\
\textit{syscall\_write} writes to the console one byte at a time untill it has written all the bytes provided by the buffer\_addr or untill the function has written the maximum allowed bytes set by the caller function.
\\
\\
Once the functions stops writing to the console, the functions returns the length of actually written bytes.
\\
It does not store what it wrote to the console anywhere nor does it delete the buffer provided by the caller function.
\subsubsection{proc/syscall.c}
Inside this files we defined A0, A1, A2, A3 and V0 in order to avoid writing \textit{$user\_context->cpu\_regs[MIPS\_REGISTER\_A0]$} every time we needed the value of A0 for instance - This also ensures much cleaner and shorter code.
\\
We implemented two cases inside the switch to handle system calls to syscall\_read and syscall\_write.
\\
These function calls are provided with the arguments A1, A2 and A3 which corresponds to the file handle, buffer and the length.\\
V0 is set to value return by the function calls which enables the actual caller function to see the result of either syscall\_read and syscall\_write
\subsection{unit testing}
\subsubsection{What do we test and where?}
The tests are initialized from main.c which calls:
\\
\begin{itemize}
  \item{unit\_test\_read}
    \\
    Tests that the read bytes are within the range of the limited length provided in the function call
  \item{unit\_test\_write}
    \\
    Tests that the written bytes are exactly the length provided in the function call
  \item{unit\_test\_read\_write}
    \\
    Reads from the console and writes what was read to the console.
    The unit test in this case checks that the read length is exactly the same as the length written to the console.
\end{itemize}
\end{document}
